generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  limit            Int               @default(0)
  accounts         Account[]
  sessions         Session[]
  Subscription     Subscription?
  calendar         Calendar[]
  personalCalendar PersonalCalendar?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BillingWebhookEvent {
  id              String   @id @default(cuid())
  name            String
  processed       Boolean  @default(false)
  body            String
  processingError String?
  createdAt       DateTime @default(now())
}

model Plan {
  id                 String         @id @default(cuid())
  productId          Int
  productName        String?
  variantId          Int            @unique
  name               String
  description        String?
  price              String
  isUsageBased       Boolean        @default(false)
  interval           String?
  intervalCount      Int?
  trialInterval      String?
  trialIntervalCount Int?
  sort               Int?
  planFeaturesId     String?
  features           PlanFeatures?  @relation(fields: [planFeaturesId], references: [id])
  Subscription       Subscription[]
}

model PlanFeatures {
  id       String  @id @default(cuid())
  images   Int
  branding Boolean
  Plan     Plan[]
}

model Subscription {
  id                 String  @id @default(cuid())
  lemonSqueezyId     String  @unique
  orderId            Int
  name               String
  email              String
  status             String
  statusFormatted    String
  renewsAt           String?
  endsAt             String?
  trialEndsAt        String?
  price              String
  isUsageBased       Boolean @default(false)
  isPaused           Boolean @default(false)
  subscriptionItemId Int?
  userId             String  @unique
  planId             String
  plan               Plan    @relation(fields: [planId], references: [id])
  user               User    @relation(fields: [userId], references: [id])
}

model Guest {
  id      String  @id @default(cuid())
  name    String?
  email   String? @unique
  eventId String?
  Event   Event?  @relation(fields: [eventId], references: [id])
}

model Face {
  id             String  @id @default(cuid())
  indexedFaceId  String
  indexedImageId String
  imageKey       String
  eventId        String?
  Event          Event?  @relation(fields: [eventId], references: [id])

  @@index([eventId])
}

model Image {
  id        String    @id @default(cuid())
  key       String
  name      String
  url       String
  type      ImageType
  eventId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Event     Event     @relation(fields: [eventId], references: [id])

  @@index([eventId])
}

model EventSettings {
  id                String   @id @default(cuid())
  isPublic          Boolean  @default(true)
  isWatermarkHidden Boolean  @default(false)
  eventId           String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PersonalCalendar {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  Event Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Calendar {
  id           String  @id @default(cuid())
  name         String
  description  String
  theme        Theme
  slug         String
  thumbnailUrl String?
  coverUrl     String?

  user       User      @relation(fields: [userId], references: [id])
  userId     String
  location   Location? @relation(fields: [locationId], references: [id])
  locationId String?

  Event Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id               String   @id @default(cuid())
  isPublic         Boolean
  name             String
  thumbnailUrl     String?
  startDate        DateTime
  startTime        String
  endDate          DateTime
  endTime          String
  description      String
  capacityValue    Int?
  capacityWaitlist Boolean  @default(false)
  requireApproval  Boolean
  tickets          Boolean

  calendar  Calendar   @relation(fields: [calendarId], references: [id])
  location  Location?  @relation(fields: [locationId], references: [id])
  pageStyle PageStyle? @relation(fields: [pageStyleId], references: [id])
  timezone  Timezone?  @relation(fields: [timezoneId], references: [id])

  ownerId     String?
  pageStyleId String?
  timezoneId  Int?
  locationId  String?
  calendarId  String

  faces  Face[]
  guests Guest[]
  images Image[]

  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  PersonalCalendar   PersonalCalendar? @relation(fields: [personalCalendarId], references: [id])
  personalCalendarId String?

  @@index([id, ownerId])
}

model Timezone {
  id    Int     @id
  label String
  value String
  city  String
  Event Event[]
}

model PageStyle {
  id    String    @id @default(cuid())
  theme Theme
  font  Font
  mode  ThemeMode
  Event Event[]
}

model Location {
  id            String     @id @default(cuid())
  placeId       String
  description   String
  mainText      String
  secondaryText String
  lat           Float
  lng           Float
  Calendar      Calendar[]
  Event         Event[]
}

enum ImageType {
  PNG
  JPG
}

enum ThemeMode {
  LIGHT
  DARK
  SYSTEM
}

enum Font {
  ROBOTO
  BOREL
  LIMELIGHT
  MALLANNA
  BAUMANS
  POTTA_ONE
}

enum Theme {
  ZINC
  SLATE
  STONE
  GRAY
  NEUTRAL
  RED
  ROSE
  ORANGE
  GREEN
  BLUE
  YELLOW
  VIOLET
}
