generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // extensions = [postgis(version: "3.3.2")]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String?        @unique
  emailVerified         DateTime?
  image                 String?
  bio                   String?
  socialLinks           SocialLinks?
  limit                 Int            @default(0)
  accounts              Account[]
  sessions              Session[]
  Subscription          Subscription?
  events                Event[]        @relation(name: "creatorOf")
  ownerOfOrganizations  Organization[] @relation(name: "ownership")
  memberOfOrganizations Organization[]
  socialLinksId         String?
  guestOf               Event[]        @relation(name: "guestOf")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SocialLinks {
  id       String  @id @default(cuid())
  website  String?
  twitter  String?
  linkedin String?
  youtue   String?
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
}

model BillingWebhookEvent {
  id              String   @id @default(cuid())
  name            String
  processed       Boolean  @default(false)
  body            String
  processingError String?
  createdAt       DateTime @default(now())
}

model Plan {
  id                 String         @id @default(cuid())
  productId          Int
  productName        String?
  variantId          Int            @unique
  name               String
  description        String?
  price              String
  isUsageBased       Boolean        @default(false)
  interval           String?
  intervalCount      Int?
  trialInterval      String?
  trialIntervalCount Int?
  sort               Int?
  planFeaturesId     String?
  features           PlanFeatures?  @relation(fields: [planFeaturesId], references: [id])
  Subscription       Subscription[]
}

model PlanFeatures {
  id       String  @id @default(cuid())
  images   Int
  branding Boolean
  Plan     Plan[]
}

model Subscription {
  id                 String  @id @default(cuid())
  lemonSqueezyId     String  @unique
  orderId            Int
  name               String
  email              String
  status             String
  statusFormatted    String
  renewsAt           String?
  endsAt             String?
  trialEndsAt        String?
  price              String
  isUsageBased       Boolean @default(false)
  isPaused           Boolean @default(false)
  subscriptionItemId Int?
  userId             String  @unique
  planId             String
  plan               Plan    @relation(fields: [planId], references: [id])
  user               User    @relation(fields: [userId], references: [id])
}

model Guest {
  id      String @id @default(cuid())
  email   String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
}

model Invite {
  id      String       @id @default(cuid())
  event   Event        @relation(fields: [eventId], references: [id])
  email   String
  status  InviteStatus @default(PENDING)
  eventId String
}

model Face {
  id             String  @id @default(cuid())
  indexedFaceId  String
  indexedImageId String
  imageKey       String
  eventId        String?
  Event          Event?  @relation(fields: [eventId], references: [id])

  @@index([eventId])
}

model Image {
  id        String    @id @default(cuid())
  key       String
  name      String
  url       String
  type      ImageType
  eventId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Event     Event     @relation(fields: [eventId], references: [id])

  @@index([eventId])
}

model EventSettings {
  id                String   @id @default(cuid())
  isPublic          Boolean  @default(true)
  isWatermarkHidden Boolean  @default(false)
  eventId           String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Organization {
  id           String  @id @default(cuid())
  isPersonal   Boolean
  name         String
  description  String?
  theme        Theme?
  slug         String?
  thumbnailUrl String?
  coverUrl     String?

  owner   User   @relation(fields: [ownerId], references: [id], name: "ownership", onDelete: Cascade)
  ownerId String

  members User[]
  events  Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id               String       @id @default(cuid())
  isPublic         Boolean
  name             String
  description      String
  thumbnailUrl     String
  date             DateTime
  timezone         String
  capacityValue    Int?
  capacityWaitlist Boolean?     @default(false)
  requireApproval  Boolean?
  creator          User         @relation(name: "creatorOf", fields: [userId], references: [id], onDelete: Cascade)
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  location         Location?    @relation(fields: [locationId], references: [id])
  locationId       String?
  organizationId   String
  userId           String
  faces            Face[]
  guests           Guest[]
  userGuests       User[]       @relation(name: "guestOf")
  images           Image[]
  invites          Invite[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Location {
  id            String                               @id @default(cuid())
  placeId       String
  mainText      String
  secondaryText String
  description   String
  lat           Float
  lng           Float
  // ref: https://freddydumont.com/blog/prisma-postgis
  geom          Unsupported("geometry(Point, 4326)")
  Event         Event[]

  @@index([geom], name: "location_idx", type: Gist)
}

// model Location {
// id            String  @id @default(cuid())
//   placeId       String
//   description   String
//   mainText      String
//   secondaryText String
//   lat           Float
//   lng           Float
//   Event         Event[]
// }

enum ImageType {
  PNG
  JPG
}

enum InviteStatus {
  GOING
  NOT_GOING
  MAYBE
  PENDING
}

enum ThemeMode {
  LIGHT
  DARK
  SYSTEM
}

enum Font {
  ROBOTO
  BOREL
  LIMELIGHT
  MALLANNA
  BAUMANS
  POTTA_ONE
}

enum Theme {
  ZINC
  SLATE
  STONE
  GRAY
  NEUTRAL
  RED
  ROSE
  ORANGE
  GREEN
  BLUE
  YELLOW
  VIOLET
}
